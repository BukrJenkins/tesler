{
          "title": "Ссылка в данных",
          "key": "dataDrilldown",
          "type": "input",
          "drillDown": true,
          "drillDownTypeKey": "dataDrilldownType",
          "drillDownKey": "dataDrilldownKey",
          "hintText": "Ссылка для перехода приходит в данных"
          }, {
          "title": "Ссылка в row-meta",
          "key": "rowMetaDrillDown",
          "type": "input",
          "drillDown": true,
          "hintText": "Переход между страницами в рамках других подсистем"
        }

     // WidgetDTO.java
      @Getter
      @Setter
      @NoArgsConstructor
      public class VanillaDocDTO extends DataResponseDTO {
          private String dataDrilldown;
          private String dataDrilldownType;
          private String dataDrilldownKey;

          private String rowMetaDrillDown;

          public WidgetDTO (SourceEntity sourceEntity) {
            this.dataDrilldown = "Сыылка из данных";
            this.dataDrilldownKey = "screen/doc/view/errors";
            this.dataDrilldownType = DrillDownType.INNER.getValue();

            this.rowMetaDrillDown = "Ссылка из row-meta";
      }

      // FieldMetaBuilder.java
      @Service
      public class FieldMetaBuilder extends FieldMetaBuilder<DTOClass> {

          @Override
          public void buildRowDependentMeta(RowDependentFieldsMeta<VanillaDocDTO> fields, Long rowId, Long parRowId) {}

          @Override
          public void buildRowDependentMetaForNewRecord(RowDependentFieldsMeta<VanillaDocDTO> fields, Long parRowId) {}

          @Override
          public void buildIndependentMeta(FieldsMeta<VanillaDocDTO> fields, Long parRowId) {
                      fields.setDrilldown(rowMetaDrillDown, DrillDownType.INNER, "screen/doc/view/errors");
          }
      }

      // WidgetServiceImpl.java
      @Service
      public class WidgetServiceImpl extends AbstractResponseService<WidgetDTO, WidgetEntity> implements VanillaDocService {

          @Autowired
          private DictionaryCache dictionaryCache;
          @Autowired
          private BCHolder bcHolder;

          public VanillaDocServiceImpl() {
              super(WidgetDTO.class, WidgetEntity.class, null, FieldMetaBuilder.class);
          }

          @Override
          public ResultPage<WidgetDTO> getList(Long parId, QueryParameters params) {
                  return entitiesToDtos(baseDAO.getList(WidgetEntity.class, WidgetDTO.class ,null, params));
          }

          @Override
          public ActionResultDTO<WidgetDTO> deleteEntity(Long id) {
              throw new UnsupportedOperationException();
          }

          @Override
          public ActionResultDTO<WidgetDTO> createEntity(Long parId) {
                VanillaTask task = baseDAO.findById(VanillaTask.class, 1L);
                ActionResultDTO<VanillaDocDTO> actionResultDTO = new ActionResultDTO<>(new VanillaDocDTO(task));
                actionResultDTO.setAction(PostAction.drillDown(DrillDownType.INNER, "screen/doc/view/errors"));
                return actionResultDTO;
          }

      }

